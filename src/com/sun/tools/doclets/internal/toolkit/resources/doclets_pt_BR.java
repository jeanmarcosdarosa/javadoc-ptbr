package com.sun.tools.doclets.internal.toolkit.resources;

import java.util.ListResourceBundle;

public final class doclets extends ListResourceBundle
{
  protected final Object[][] getContents()
  {
    return new Object[][] { 
     { "doclet.0_and_1", "{0} e {1}" },
     { "doclet.All_Classes", "Todas as classes" },
     { "doclet.All_Implemented_Interfaces", "Todas as interfaces implementadas:" },
     { "doclet.All_Superinterfaces", "All Superinterfaces:" },
     { "doclet.All_classes_and_interfaces", "Todas as classes e interfaces (exceto tipos não estáticos)" },
     { "doclet.AnnotationType", "Tipo de Anotação" },
     { "doclet.AnnotationTypes", "Tipos de Anotações" },
     { "doclet.Annotation_Type_Member", "Tipo de anotação Elemento" },
     { "doclet.Annotation_Type_Member_Detail", "Detalhes do Elemento" },
     { "doclet.Annotation_Type_Optional_Member", "Elemento Opcional" },
     { "doclet.Annotation_Type_Optional_Member_Summary", "Resumo de elementos opcionais" },
     { "doclet.Annotation_Type_Optional_Members", "Elementos Opcionais" },
     { "doclet.Annotation_Type_Required_Member", "Elemento Obrigatório" },
     { "doclet.Annotation_Type_Required_Member_Summary", "Resumo de elementos obrigatórios" },
     { "doclet.Annotation_Type_Required_Members", "Elementos Obrigatórios" },
     { "doclet.Annotation_Types_Summary", "Resumo de tipos de anotações" },
     { "doclet.Author", "Autor:" },
     { "doclet.Building_Index", "Construindo índices para todas os pacotes e classes..." },
     { "doclet.Building_Index_For_All_Classes", "Construindo índices para todas as classes..." },
     { "doclet.Building_Tree", "Construindo árvore para todos os pacotes e classes..." },
     { "doclet.Class", "Classe" },
     { "doclet.Class_0_extends_implements_serializable", "Classe {0} extende {1} implementa Serializable" },
     { "doclet.Class_0_implements_serializable", "Classe {0} implementa Serializable" },
     { "doclet.Class_Summary", "Resumo da classe" },
     { "doclet.Classes", "Classes" },
     { "doclet.ConstantField", "Campo constante" },
     { "doclet.Constants_Summary", "Valores dos campos constantes" },
     { "doclet.Constants_Table_Summary", "{0} tabela, listando campos constantes, e valores" },
     { "doclet.Constructor", "Construtor" },
     { "doclet.Constructor_Detail", ""Detalhes do Construtor" },
     { "doclet.Constructor_Summary", ""Resumo do Construtor" },
     { "doclet.Constructors", "Construtores" },
     { "doclet.Copy_Overwrite_warning", "Arquivo {0} não copiado para {1} devido arquivo existente com o mesmo nome..." },
     { "doclet.Copying_File_0_To_Dir_1", "Copiando arquivo {0} para diretório {1}..." },
     { "doclet.Copying_File_0_To_File_1", "Copiando arquivo {0} para arquivo {1}..." },
     { "doclet.Default", "Padrão:" },
     { "doclet.DefaultValue", "Valor padrão:" },
     { "doclet.Deprecated", "Depreciado." },
     { "doclet.Deprecated_class", "Esta classe está depreciada." },
     { "doclet.Description", "Descrição" },
     { "doclet.Encoding_not_supported", "Encoding não suportado: {0}" },
     { "doclet.Enum", "Enumeração" },
     { "doclet.Enum_Constant", "Enumeração Constante" },
     { "doclet.Enum_Constant_Detail", "Detales da enumeração constante" },
     { "doclet.Enum_Constant_Summary", "Resumo da enumeração constante" },
     { "doclet.Enum_Constants", "Enumerações Constante" },
     { "doclet.Enum_Summary", "Resumo da Enumeração" },
     { "doclet.Enums", "Enumerações" },
     { "doclet.Error", "Erro" },
     { "doclet.Error_Summary", "Resumo do Erro" },
     { "doclet.Error_creating_tmp_file", "Erro ao criar arquivo temporário, usando a plataforma de codificação padrão." },
     { "doclet.Error_invalid_custom_tag_argument", "Erro - {0} é um argumento inválido para a opção -tag ..." },
     { "doclet.Error_taglet_not_registered", "Erro - Exceção {0} jogada ao tentar registrar Taglet {1}..." },
     { "doclet.Errors", "Erros" },
     { "doclet.Exception", "Exceção" },
     { "doclet.Exception_Summary", "Resumo da Exceção" },
     { "doclet.Exceptions", "Exceções" },
     { "doclet.Externalizable", "Externalizavel" },
     { "doclet.Factory", "Fábrica:" },
     { "doclet.Factory_Method_Summary", "Resumo da Fábrica de Método estático" },
     { "doclet.Field", "Campo" },
     { "doclet.Field_Detail", "Detalhe do Campo" },
     { "doclet.Field_Summary", "Resumo do Campo,
     { "doclet.Fields", "Campos" },
     { "doclet.Fields_Inherited_From_Class", "Campos herdados da classe" },
     { "doclet.Fields_Inherited_From_Interface", "Campos herdados da interface" },
     { "doclet.File_not_found", "Arquivo não encontrado: {0}" },
     { "doclet.Generating_0", "Gerando {0}..." },
     { "doclet.Groupname_already_used", "Na opção -group, nome do grupo já utilizado: {0}" },
     { "doclet.Interface", "Interface" },
     { "doclet.Interface_Summary", "Resumo da Interface" },
     { "doclet.Interfaces", "Interfaces" },
     { "doclet.Member_Table_Summary", "{0} tabela, lista {1}, e uma explicação" },
     { "doclet.Members", "Membros" },
     { "doclet.Method", "Método" },
     { "doclet.Method_Detail", "Detalhes do Método" },
     { "doclet.Method_Summary", "Resumo do Método" },
     { "doclet.Methods", "Métodos" },
     { "doclet.Methods_Inherited_From_Class", "Métodos herdados da classe" },
     { "doclet.Methods_Inherited_From_Interface", "Métodos herdados da interface" },
     { "doclet.MissingSerialDataTag", "na classe {0}, faltou a tag @serialData no método {1}." },
     { "doclet.MissingSerialTag", "na classe {0}, faltou a tag @serial para o campo serializado padrão: {1}." },
     { "doclet.Modifier", "Modificador" },
     { "doclet.Nested_Class_Summary", "Resumo de Classes aninhadas" },
     { "doclet.Nested_Classes", "Classes aninhadas" },
     { "doclet.Nested_Classes_Interface_Inherited_From_Interface", "Classes aninhadas/interfaces herdadas da interface" },
     { "doclet.Nested_Classes_Interfaces_Inherited_From_Class", "Classes aninhadas/interfaces herdadas da classe" },
     { "doclet.No_Public_Classes_To_Document", "Não há classes públicas ou protegidas encontrados para o documento." },
     { "doclet.Notice_taglet_conflict_warn", "Nota: Tags personalizadas que podem substituir futuras tags padrões: {0}. Para evitar possíveis sobreposições, usar pelo menos um caractere de ponto (.) no nome das tags personalizadas." },
     { "doclet.Notice_taglet_overriden", "Nota: Tags personalizadas que substituem tags padrão: {0}" },
     { "doclet.Notice_taglet_registered", "Taglet registrada {0} ..." },
     { "doclet.Notice_taglet_unseen", "Nota: Tags personalizadas que não eram vistas: {0}" },
     { "doclet.Option_conflict", "Opção {0} conflita com {1}" },
     { "doclet.Option_reuse", "Opção reusada: {0}" },
     { "doclet.Other_Packages", "Outros pacotes" },
     { "doclet.Package_Summary", "Resumo do pacote" },
     { "doclet.Package_class_and_interface_descriptions", "Descrições de pacote, classe e interface" },
     { "doclet.Package_private", "(pacote privado)" },
     { "doclet.Packages", "Pacotes" },
     { "doclet.Parameters", "Parâmetros:" },
     { "doclet.Parameters_dup_warn", "Parâmetro \"{0}\" está documentado mais do que uma vez." },
     { "doclet.Parameters_warn", "@param argument \"{0}\" não é um nome de parâmetro." },
     { "doclet.Properties", "Propriedades" },
     { "doclet.Properties_Inherited_From_Class", "Propriedades herdadas da classe" },
     { "doclet.Properties_Inherited_From_Interface", "Propriedades herdadas da interface" },
     { "doclet.Property", "Propriedade" },
     { "doclet.PropertyDescription", "Descrição da Propriedade:" },
     { "doclet.PropertyGetter", "Pega o valor da propriedade" },
     { "doclet.PropertyGetterWithName", "Pega o valor da propriedade {0}." },
     { "doclet.PropertySetter", "Coloca o valor da propriedade" },
     { "doclet.PropertySetterWithName", "Coloca o valor da propriedade {0}." },
     { "doclet.Property_Detail", "Detalhes da propriedade" },
     { "doclet.Property_Summary", "Resumo da propriedade" },
     { "doclet.Return_tag_on_void_method", "@return tag não pode ser usada no método com o tipo de retorno void." },
     { "doclet.Returns", "Retorna:" },
     { "doclet.See", "Veja:" },
     { "doclet.See_Also", "Veja também:" },
     { "doclet.SerialData", "Serial Data:" },
     { "doclet.Serializable", "Serializavel" },
     { "doclet.Serializable_no_customization", "Mátodo readObject ou writeObject não declarado." },
     { "doclet.Serialized_Form", "Formulário da Serialização" },
     { "doclet.Serialized_Form_class", "Visão geral da Serialização" },
     { "doclet.Serialized_Form_fields", "Campos Serializados" },
     { "doclet.Serialized_Form_methods", "Métodos Serializados" },
     { "doclet.Serialized_Form_properties", "Propriedades Serializadas" },
     { "doclet.Since", "Desde:" },
     { "doclet.Throws", "Joga:" },
     { "doclet.Toolkit_Usage_Violation", "O Doclet Toolkit só pode ser usado por {0}" },
     { "doclet.Type", "Tipo" },
     { "doclet.TypeParameters", "Tipos de parâmetros:" },
     { "doclet.Type_Parameters_dup_warn", "Type parameter \"{0}\" está documentado mais do que uma vez." },
     { "doclet.Type_Parameters_warn", "@param argumento \"{0}\" não é um nome de tipo de parâmetro." },
     { "doclet.Unable_to_create_directory_0", "Não é possível criar diretório {0}" },
     { "doclet.UnknownTag", "{0} é uma tag desconhecida." },
     { "doclet.UnknownTagLowercase", "{0} é uma tag desconhecida -- same as a known tag except for case." },
     { "doclet.Use_Table_Summary", "Use a tabela, listando {0}, e uma explicação" },
     { "doclet.Value", "Valor" },
     { "doclet.Version", "Versão:" },
     { "doclet.annotation_type_optional_members", "elementos opcionais" },
     { "doclet.annotation_type_required_members", "elementos obrigatórios" },
     { "doclet.annotationtype", "tipo de anotação" },
     { "doclet.annotationtypes", "tipos de anotações" },
     { "doclet.class", "classe" },
     { "doclet.classes", "classes" },
     { "doclet.constructors", "construtores" },
     { "doclet.dest_dir_create", "Criando diretório destino: \"{0}\"" },
     { "doclet.destination_directory_not_directory_0", "Diretório destino não é um diretório {0}" },
     { "doclet.destination_directory_not_found_0", "Diretório destino não encontrado {0}" },
     { "doclet.destination_directory_not_writable_0", "Diretório destino não permite escrita {0}" },
     { "doclet.enum", "enumeração" },
     { "doclet.enum_constants", "enumeração constantes" },
     { "doclet.enum_valueof_doc.main", "\nRetorna a constante de enumeração deste tipo com o nome especificado.\nA seqüência de caracteres deve corresponder <i>exatamente</i> um identificador usado para declarar uma\nconstante de enumeração nesse tipo.  (Caracteres em branco estranhos não \nsão permitidos.)" },
     { "doclet.enum_valueof_doc.param_name", "o nome da enumeração constante para ser retornado." },
     { "doclet.enum_valueof_doc.return", "a enumeração constante com o nome especificado" },
     { "doclet.enum_valueof_doc.throws_ila", "se este tipo de enumeração não tem constante com o nome especificado" },
     { "doclet.enum_valueof_doc.throws_npe", "se o argumento é nullo" },
     { "doclet.enum_values_doc.main", "\Retorna um array contendo as constantes desse tipo de enumeração, na\nordem em que forem declarados.  Este método pode ser usado para iterar\nas constantes da seguinte forma:\n<pre>\nfor ({0} c : {0}.values())\n&nbsp;   System.out.println(c);\n</pre>" },
     { "doclet.enum_values_doc.return", "\num array contendo as constantes desse tipo de enumeração, na ordem em que são declaradas" },
     { "doclet.enums", "enumerações" },
     { "doclet.error", "erro" },
     { "doclet.errors", "erros" },
     { "doclet.exception", "exceção" },
     { "doclet.exception_encountered", "{0} encontrado \n\tao tentar criar o arquivo: {1}" },
     { "doclet.exceptions", "exceções" },
     { "doclet.extended_by", "extendido por" },
     { "doclet.extends", "extende" },
     { "doclet.fields", "campos" },
     { "doclet.implements", "implementsdoclet.Same_package_name_used=Formato do nome de pacote usado duas vezes: {0}" },
     { "doclet.in", "{0} em {1}" },
     { "doclet.interface", "interface" },
     { "doclet.interfaces", "interfaces" },
     { "doclet.javafx_tag_misuse", "Tags @propertyGetter, @propertySetter e @propertyDescription só podem ser usados em propriedades getters e setters do JavaFX." },
     { "doclet.malformed_html_link_tag", "<a> tag esta deformada:\n\"{0}\"" },
     { "doclet.methods", "métodos" },
     { "doclet.nested_classes", "classes aninhadas" },
     { "doclet.noInheritedDoc", "@inheritDoc usado mas {0} não substitui ou implementa qualquer método." },
     { "doclet.packages", "pacotes" },
     { "doclet.perform_copy_exception_encountered", "{0} encontrado ao \nrealizar cópia." },
     { "doclet.properties", "propriedades" },
     { "doclet.sourcetab_warning", "O argumento para -sourcetab deve ser um número inteiro maior do que 0." },
     { "doclet.subclasses", "subclasses" },
     { "doclet.subinterfaces", "subinterfaces" },
     { "doclet.tag_misuse", "Tag {0} não pode ser usada em {1} documentação.  Só pode ser usado nos seguintes tipos de documentação: {2}." },
     { "doclet.value_tag_invalid_constant", "tag @value (que referencia {0}) só pode ser utilizado em constantes." },
     { "doclet.value_tag_invalid_reference", "{0} (referenciado pela tag @value) é uma referência desconhecida." } };
  }
}